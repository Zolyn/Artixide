use color_eyre::Result;
use crossterm::event::KeyCode;
use indoc::{formatdoc, indoc};

use ratatui::layout::{Constraint, Layout, Rect};

use crate::{
    fetch_data_if_needed,
    tui::{
        data::mirror::get_mirrors,
        widgets::{
            menu::{CachedSearchableMenu, Menu, MenuArgs},
            Widget,
        },
        Msg, TuiBackend,
    },
    wrap_view,
};

use super::{vertical_layout, View};

wrap_view!(MirrorView, Mirror);

const MIRROR_TYPES: &[&str] = &["Mirror group", "Single mirror"];
const FILE_HEADER: &str = indoc! {"
    ##
    ## Mirrorlist generated by Artixide
    ##
"};

#[derive(Debug, Clone, Copy)]
enum MirrorMenu {
    Group,
    Single,
}

#[derive(Debug, Default)]
struct MirrorView {
    main_menu: Menu,
    mirror_menus: [CachedSearchableMenu<String>; 2],
    layout: Layout,
    mirror_type: Option<MirrorMenu>,
    servers: Vec<Vec<String>>,
    default_servers_count: usize,
}

impl MirrorView {
    fn new() -> Self {
        let layout = vertical_layout([
            Constraint::Length(5),
            Constraint::Min(4),
            Constraint::Length(1),
        ]);

        Self {
            layout,
            ..Default::default()
        }
    }
}

// TODO: Write a proc macro to create inline methods
macro_rules! get_menu_mut_unchecked {
    ($self:ident) => {
        &mut $self.mirror_menus[$self.mirror_type.unwrap() as usize]
    };
}

impl View for MirrorView {
    fn on_event(
        &mut self,
        event: crossterm::event::KeyEvent,
        config: &mut crate::config::Config,
    ) -> Option<crate::tui::Msg> {
        if self.mirror_type.is_none() {
            match event.code {
                KeyCode::Esc | KeyCode::Char('q') => return Some(Msg::BackToMain),
                KeyCode::Enter => match MIRROR_TYPES[self.main_menu.current_index()?] {
                    "Mirror group" => self.mirror_type = Some(MirrorMenu::Group),
                    "Single mirror" => self.mirror_type = Some(MirrorMenu::Single),
                    _ => unreachable!(),
                },
                _ => return self.main_menu.on_event(event),
            };

            return None;
        }

        let menu = get_menu_mut_unchecked!(self);

        match event.code {
            KeyCode::Esc => {
                if menu.search_enabled() {
                    menu.reset_search();
                    return None;
                }

                self.mirror_type.take();
                None
            }
            KeyCode::Char('q') if !menu.search_enabled() => {
                self.mirror_type.take();
                None
            }
            KeyCode::Enter => match self.mirror_type.unwrap() {
                MirrorMenu::Group => {
                    let group = menu.current_item()?;
                    let servers = &self.servers[menu.current_index()?];

                    let servers = servers
                        .iter()
                        .map(|s| s.as_ref())
                        .collect::<Vec<_>>()
                        .join("\n");

                    let mirror = formatdoc! {"
                            {}
                            {}
                            {}
                        ", FILE_HEADER, group, servers};

                    config.mirror = mirror;

                    Some(Msg::BackToMain)
                }
                MirrorMenu::Single => {
                    let index = menu.current_index()?;
                    let item = self
                        .servers
                        .iter()
                        .flatten()
                        .skip(self.default_servers_count)
                        .nth(index)?;

                    let mirror = formatdoc! {"
                            {}
                            {}
                        ", FILE_HEADER, item};

                    config.mirror = mirror;

                    Some(Msg::BackToMain)
                }
            },
            _ => menu.on_event(event),
        }
    }

    fn render(&mut self, frame: &mut ratatui::Frame<TuiBackend>) -> Result<()> {
        fetch_data_if_needed!({
            let (group, servers, trim_servers, default_servers_count) = get_mirrors()?;

            self.mirror_menus[MirrorMenu::Group as usize].replace_items(group);

            self.mirror_menus[MirrorMenu::Single as usize].replace_items(trim_servers);

            self.servers = servers;
            self.default_servers_count = default_servers_count;
        });

        let chunks = self.layout.split(frame.size());

        let area: Rect = chunks[1];
        let args = MenuArgs::builder().frame(frame);

        if self.mirror_type.is_none() {
            let area =
                vertical_layout([Constraint::Length(4), Constraint::Min(1)]).split(chunks[1])[0];

            self.main_menu.render(MIRROR_TYPES, args.area(area).build());
            return Ok(());
        }

        let menu = get_menu_mut_unchecked!(self);
        let args = args.area(area).build();

        match self.mirror_type.unwrap() {
            MirrorMenu::Group => menu.render_with(|i| &i[2..], args),
            MirrorMenu::Single => menu.render_default(args),
        }

        menu.render_searchbar_default(frame, chunks[2]);
        Ok(())
    }
}
